# instalar Dependencias
FROM node:21-alpine3.19 AS deps

WORKDIR /usr/src/app

COPY package.json ./
COPY package-lock.json ./

RUN npm install




# Builder - Construye la aplicación
FROM node:21-alpine3.19 AS build

# setea y mueve a este directorio
WORKDIR /usr/src/app

# Copiar de dependenciass, los módulos de node  desde el paso anterior
# (source : destino)
COPY --from=deps /usr/src/app/node_modules ./node_modules

# Copiar todo el codigo fuente de la aplicación
COPY . .

# RUN npm run test, lineter o cualquier tipo de verificacion antes de construir la imagen
# RUN npm run test
# RUN npm run lint
# si los test y lint pasan, entonces se puede construir la imagen, sino no se construye

# Construir la aplicación
RUN npm run build


# Instalar solo las dependencias de producción y limpiar la cache
RUN npm ci -f --only=production && npm cache clean --force

RUN npx prisma generate

# Crear la imagen final de Docker
FROM node:21-alpine3.19 AS prod

WORKDIR /usr/src/app


COPY --from=build /usr/src/app/node_modules ./node_modules

# Copiar la carpeta de DIST
COPY --from=build /usr/src/app/dist ./dist
#  carpeta prisma
COPY --from=build /usr/src/app/prisma ./prisma

# como buena practica para que sepa el ambiente en el que se esta ejecutando
ENV NODE_ENV=production

# se crea un usuario no root, y se mueve a ese usuario para que no se ejecute como root
USER node


EXPOSE 3000

CMD [ "node", "dist/main.js" ]